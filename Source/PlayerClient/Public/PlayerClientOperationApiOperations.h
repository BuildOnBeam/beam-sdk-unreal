/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "PlayerClientBaseModel.h"
#include "PlayerClientOperationApi.h"

#include "PlayerClientBeamErrorResponse.h"
#include "PlayerClientConfirmOperationRequest.h"
#include "PlayerClientPlayerOperationResponse.h"

namespace OpenAPI
{

/* Delete an operation

*/
class PLAYERCLIENT_API PlayerClientOperationApi::DeleteOperationRequest : public Request
{
public:
    virtual ~DeleteOperationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString OpId;
};

class PLAYERCLIENT_API PlayerClientOperationApi::DeleteOperationResponse : public Response
{
public:
    virtual ~DeleteOperationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientPlayerOperationResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* Executes operation for given id

*/
class PLAYERCLIENT_API PlayerClientOperationApi::ExecuteSignedOperationRequest : public Request
{
public:
    virtual ~ExecuteSignedOperationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString OpId;
};

class PLAYERCLIENT_API PlayerClientOperationApi::ExecuteSignedOperationResponse : public Response
{
public:
    virtual ~ExecuteSignedOperationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientPlayerOperationResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* Returns operation data for given id. Used by Game SDKs to get transaction results.

*/
class PLAYERCLIENT_API PlayerClientOperationApi::GetOperationRequest : public Request
{
public:
    virtual ~GetOperationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString OpId;
};

class PLAYERCLIENT_API PlayerClientOperationApi::GetOperationResponse : public Response
{
public:
    virtual ~GetOperationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientPlayerOperationResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* Updates operation result for given id

*/
class PLAYERCLIENT_API PlayerClientOperationApi::ProcessOperationRequest : public Request
{
public:
    virtual ~ProcessOperationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString OpId;
	PlayerClientConfirmOperationRequest PlayerClientConfirmOperationRequest;
};

class PLAYERCLIENT_API PlayerClientOperationApi::ProcessOperationResponse : public Response
{
public:
    virtual ~ProcessOperationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientPlayerOperationResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

}
