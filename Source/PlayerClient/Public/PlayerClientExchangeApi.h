/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "PlayerClientBaseModel.h"

namespace OpenAPI
{

class PLAYERCLIENT_API PlayerClientExchangeApi
{
public:
	PlayerClientExchangeApi();
	~PlayerClientExchangeApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ConvertInputRequest;
	class ConvertInputResponse;
	class ConvertToOutputRequest;
	class ConvertToOutputResponse;
	class GetQuoteForInputRequest;
	class GetQuoteForInputResponse;
	class GetQuoteForOutputRequest;
	class GetQuoteForOutputResponse;
	class UnwrapNativeRequest;
	class UnwrapNativeResponse;
	class WrapNativeRequest;
	class WrapNativeResponse;
	
    DECLARE_DELEGATE_OneParam(FConvertInputDelegate, const ConvertInputResponse&);
    DECLARE_DELEGATE_OneParam(FConvertToOutputDelegate, const ConvertToOutputResponse&);
    DECLARE_DELEGATE_OneParam(FGetQuoteForInputDelegate, const GetQuoteForInputResponse&);
    DECLARE_DELEGATE_OneParam(FGetQuoteForOutputDelegate, const GetQuoteForOutputResponse&);
    DECLARE_DELEGATE_OneParam(FUnwrapNativeDelegate, const UnwrapNativeResponse&);
    DECLARE_DELEGATE_OneParam(FWrapNativeDelegate, const WrapNativeResponse&);
    
    FHttpRequestPtr ConvertInput(const ConvertInputRequest& Request, const FConvertInputDelegate& Delegate = FConvertInputDelegate()) const;
    FHttpRequestPtr ConvertToOutput(const ConvertToOutputRequest& Request, const FConvertToOutputDelegate& Delegate = FConvertToOutputDelegate()) const;
    FHttpRequestPtr GetQuoteForInput(const GetQuoteForInputRequest& Request, const FGetQuoteForInputDelegate& Delegate = FGetQuoteForInputDelegate()) const;
    FHttpRequestPtr GetQuoteForOutput(const GetQuoteForOutputRequest& Request, const FGetQuoteForOutputDelegate& Delegate = FGetQuoteForOutputDelegate()) const;
    FHttpRequestPtr UnwrapNative(const UnwrapNativeRequest& Request, const FUnwrapNativeDelegate& Delegate = FUnwrapNativeDelegate()) const;
    FHttpRequestPtr WrapNative(const WrapNativeRequest& Request, const FWrapNativeDelegate& Delegate = FWrapNativeDelegate()) const;
    
private:
    void OnConvertInputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConvertInputDelegate Delegate) const;
    void OnConvertToOutputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConvertToOutputDelegate Delegate) const;
    void OnGetQuoteForInputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetQuoteForInputDelegate Delegate) const;
    void OnGetQuoteForOutputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetQuoteForOutputDelegate Delegate) const;
    void OnUnwrapNativeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnwrapNativeDelegate Delegate) const;
    void OnWrapNativeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWrapNativeDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
