/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "PlayerClientBaseModel.h"
#include "PlayerClientSessionsApi.h"
#include <string>
#include <stdexcept>
    
#include "PlayerClientBeamErrorResponse.h"
#include "PlayerClientGenerateSessionRequestResponse.h"
#include "PlayerClientGenerateSessionUrlRequestInput.h"
#include "PlayerClientGetActiveSessionResponse.h"
#include "PlayerClientGetActiveSessionResponseV2.h"
#include "PlayerClientGetActiveSessionsResponse.h"
#include "PlayerClientGetSessionRequestResponse.h"
#include "PlayerClientPlayerOperationResponse.h"
#include "PlayerClientRevokeSessionRequestInput.h"

namespace OpenAPI
{

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::CreateSessionRequestRequest : public Request
{
public:
    virtual ~CreateSessionRequestRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	PlayerClientGenerateSessionUrlRequestInput PlayerClientGenerateSessionUrlRequestInput;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::CreateSessionRequestResponse : public Response
{
public:
    virtual ~CreateSessionRequestResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGenerateSessionRequestResponse Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::CreateSessionRequestV2Request : public Request
{
public:
    virtual ~CreateSessionRequestV2Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	PlayerClientGenerateSessionUrlRequestInput PlayerClientGenerateSessionUrlRequestInput;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::CreateSessionRequestV2Response : public Response
{
public:
    virtual ~CreateSessionRequestV2Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGenerateSessionRequestResponse Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::GetActiveSessionRequest : public Request
{
public:
    virtual ~GetActiveSessionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	FString AccountAddress;
	TOptional<int64> ChainId;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::GetActiveSessionResponse : public Response
{
public:
    virtual ~GetActiveSessionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetActiveSessionResponse Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::GetActiveSessionV2Request : public Request
{
public:
    virtual ~GetActiveSessionV2Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	FString AccountAddress;
	TOptional<int64> ChainId;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::GetActiveSessionV2Response : public Response
{
public:
    virtual ~GetActiveSessionV2Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetActiveSessionResponseV2 Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::GetAllActiveSessionsRequest : public Request
{
public:
    virtual ~GetAllActiveSessionsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	TOptional<int64> ChainId;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::GetAllActiveSessionsResponse : public Response
{
public:
    virtual ~GetAllActiveSessionsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetActiveSessionsResponse Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::GetSessionRequestRequest : public Request
{
public:
    virtual ~GetSessionRequestRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString RequestId;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::GetSessionRequestResponse : public Response
{
public:
    virtual ~GetSessionRequestResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetSessionRequestResponse Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* 

*/
class PLAYERCLIENT_API PlayerClientSessionsApi::RevokeSessionRequest : public Request
{
public:
    virtual ~RevokeSessionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	PlayerClientRevokeSessionRequestInput PlayerClientRevokeSessionRequestInput;
};

class PLAYERCLIENT_API PlayerClientSessionsApi::RevokeSessionResponse : public Response
{
public:
    virtual ~RevokeSessionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientPlayerOperationResponse Content;
private:
    FString GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

}
