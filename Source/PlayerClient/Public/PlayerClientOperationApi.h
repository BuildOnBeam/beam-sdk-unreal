/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "PlayerClientBaseModel.h"

namespace OpenAPI
{

class PLAYERCLIENT_API PlayerClientOperationApi
{
public:
	PlayerClientOperationApi();
	~PlayerClientOperationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateOperationRequest;
	class CreateOperationResponse;
	class DeleteOperationRequest;
	class DeleteOperationResponse;
	class ExecuteSignedOperationRequest;
	class ExecuteSignedOperationResponse;
	class GetOperationRequest;
	class GetOperationResponse;
	class ProcessOperationRequest;
	class ProcessOperationResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateOperationDelegate, const CreateOperationResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteOperationDelegate, const DeleteOperationResponse&);
    DECLARE_DELEGATE_OneParam(FExecuteSignedOperationDelegate, const ExecuteSignedOperationResponse&);
    DECLARE_DELEGATE_OneParam(FGetOperationDelegate, const GetOperationResponse&);
    DECLARE_DELEGATE_OneParam(FProcessOperationDelegate, const ProcessOperationResponse&);
    
    FHttpRequestPtr CreateOperation(const CreateOperationRequest& Request, const FCreateOperationDelegate& Delegate = FCreateOperationDelegate()) const;
    FHttpRequestPtr DeleteOperation(const DeleteOperationRequest& Request, const FDeleteOperationDelegate& Delegate = FDeleteOperationDelegate()) const;
    FHttpRequestPtr ExecuteSignedOperation(const ExecuteSignedOperationRequest& Request, const FExecuteSignedOperationDelegate& Delegate = FExecuteSignedOperationDelegate()) const;
    FHttpRequestPtr GetOperation(const GetOperationRequest& Request, const FGetOperationDelegate& Delegate = FGetOperationDelegate()) const;
    FHttpRequestPtr ProcessOperation(const ProcessOperationRequest& Request, const FProcessOperationDelegate& Delegate = FProcessOperationDelegate()) const;
    
private:
    void OnCreateOperationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOperationDelegate Delegate) const;
    void OnDeleteOperationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteOperationDelegate Delegate) const;
    void OnExecuteSignedOperationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FExecuteSignedOperationDelegate Delegate) const;
    void OnGetOperationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOperationDelegate Delegate) const;
    void OnProcessOperationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProcessOperationDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
