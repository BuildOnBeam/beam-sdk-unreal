/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "PlayerClientBaseModel.h"

namespace OpenAPI
{

/*
 * PlayerClientCreateOnrampRequestInput
 *
 * 
 */
class PLAYERCLIENT_API PlayerClientCreateOnrampRequestInput : public Model
{
public:
    virtual ~PlayerClientCreateOnrampRequestInput() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	enum class PlatformEnum
	{
		Transak,
		Thirdweb,
  	};

	static FString EnumToString(const PlatformEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, PlatformEnum& EnumValue);
	TOptional<PlatformEnum> Platform;
	enum class TokenEnum
	{
		Beam,
		Fp,
  	};

	static FString EnumToString(const TokenEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, TokenEnum& EnumValue);
	TOptional<TokenEnum> Token;
	TOptional<FString> TokenAmount;
	TOptional<FString> FiatAmount;
	TOptional<FString> PaymentCurrency;
	TOptional<bool> CanChangeAmount;
	TOptional<int64> ChainId;
	enum class AuthProviderEnum
	{
		Any,
		Google,
		Discord,
		Apple,
  	};

	static FString EnumToString(const AuthProviderEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, AuthProviderEnum& EnumValue);
	/* Auth Provider for the user to use. If it's Any, user will be able to choose his preferred login method. Useful when you want to present social login choice in your UI. */
	TOptional<AuthProviderEnum> AuthProvider;
};

}
