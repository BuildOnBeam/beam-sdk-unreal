/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "PlayerClientBaseModel.h"

namespace OpenAPI
{

class PLAYERCLIENT_API PlayerClientAssetsApi
{
public:
	PlayerClientAssetsApi();
	~PlayerClientAssetsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetAssetRequest;
	class GetAssetResponse;
	class GetAssetsForContractRequest;
	class GetAssetsForContractResponse;
	class GetAttributesRequest;
	class GetAttributesResponse;
	class GetOwnerAssetsRequest;
	class GetOwnerAssetsResponse;
	class GetOwnersRequest;
	class GetOwnersResponse;
	class GetUserAssetsForGamePostRequest;
	class GetUserAssetsForGamePostResponse;
	class GetUserCurrenciesRequest;
	class GetUserCurrenciesResponse;
	class GetUserNativeCurrencyRequest;
	class GetUserNativeCurrencyResponse;
	class TransferAssetRequest;
	class TransferAssetResponse;
	class TransferNativeTokenRequest;
	class TransferNativeTokenResponse;
	class TransferTokenRequest;
	class TransferTokenResponse;
	
    DECLARE_DELEGATE_OneParam(FGetAssetDelegate, const GetAssetResponse&);
    DECLARE_DELEGATE_OneParam(FGetAssetsForContractDelegate, const GetAssetsForContractResponse&);
    DECLARE_DELEGATE_OneParam(FGetAttributesDelegate, const GetAttributesResponse&);
    DECLARE_DELEGATE_OneParam(FGetOwnerAssetsDelegate, const GetOwnerAssetsResponse&);
    DECLARE_DELEGATE_OneParam(FGetOwnersDelegate, const GetOwnersResponse&);
    DECLARE_DELEGATE_OneParam(FGetUserAssetsForGamePostDelegate, const GetUserAssetsForGamePostResponse&);
    DECLARE_DELEGATE_OneParam(FGetUserCurrenciesDelegate, const GetUserCurrenciesResponse&);
    DECLARE_DELEGATE_OneParam(FGetUserNativeCurrencyDelegate, const GetUserNativeCurrencyResponse&);
    DECLARE_DELEGATE_OneParam(FTransferAssetDelegate, const TransferAssetResponse&);
    DECLARE_DELEGATE_OneParam(FTransferNativeTokenDelegate, const TransferNativeTokenResponse&);
    DECLARE_DELEGATE_OneParam(FTransferTokenDelegate, const TransferTokenResponse&);
    
    FHttpRequestPtr GetAsset(const GetAssetRequest& Request, const FGetAssetDelegate& Delegate = FGetAssetDelegate()) const;
    FHttpRequestPtr GetAssetsForContract(const GetAssetsForContractRequest& Request, const FGetAssetsForContractDelegate& Delegate = FGetAssetsForContractDelegate()) const;
    FHttpRequestPtr GetAttributes(const GetAttributesRequest& Request, const FGetAttributesDelegate& Delegate = FGetAttributesDelegate()) const;
    FHttpRequestPtr GetOwnerAssets(const GetOwnerAssetsRequest& Request, const FGetOwnerAssetsDelegate& Delegate = FGetOwnerAssetsDelegate()) const;
    FHttpRequestPtr GetOwners(const GetOwnersRequest& Request, const FGetOwnersDelegate& Delegate = FGetOwnersDelegate()) const;
    FHttpRequestPtr GetUserAssetsForGamePost(const GetUserAssetsForGamePostRequest& Request, const FGetUserAssetsForGamePostDelegate& Delegate = FGetUserAssetsForGamePostDelegate()) const;
    FHttpRequestPtr GetUserCurrencies(const GetUserCurrenciesRequest& Request, const FGetUserCurrenciesDelegate& Delegate = FGetUserCurrenciesDelegate()) const;
    FHttpRequestPtr GetUserNativeCurrency(const GetUserNativeCurrencyRequest& Request, const FGetUserNativeCurrencyDelegate& Delegate = FGetUserNativeCurrencyDelegate()) const;
    FHttpRequestPtr TransferAsset(const TransferAssetRequest& Request, const FTransferAssetDelegate& Delegate = FTransferAssetDelegate()) const;
    FHttpRequestPtr TransferNativeToken(const TransferNativeTokenRequest& Request, const FTransferNativeTokenDelegate& Delegate = FTransferNativeTokenDelegate()) const;
    FHttpRequestPtr TransferToken(const TransferTokenRequest& Request, const FTransferTokenDelegate& Delegate = FTransferTokenDelegate()) const;
    
private:
    void OnGetAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAssetDelegate Delegate) const;
    void OnGetAssetsForContractResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAssetsForContractDelegate Delegate) const;
    void OnGetAttributesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAttributesDelegate Delegate) const;
    void OnGetOwnerAssetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOwnerAssetsDelegate Delegate) const;
    void OnGetOwnersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetOwnersDelegate Delegate) const;
    void OnGetUserAssetsForGamePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserAssetsForGamePostDelegate Delegate) const;
    void OnGetUserCurrenciesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserCurrenciesDelegate Delegate) const;
    void OnGetUserNativeCurrencyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserNativeCurrencyDelegate Delegate) const;
    void OnTransferAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferAssetDelegate Delegate) const;
    void OnTransferNativeTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferNativeTokenDelegate Delegate) const;
    void OnTransferTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferTokenDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
