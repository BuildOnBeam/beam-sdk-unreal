/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "PlayerClientBaseModel.h"
#include "PlayerClientTransactionsApi.h"

#include "PlayerClientBeamErrorResponse.h"
#include "PlayerClientCreateTransactionRequestInput.h"
#include "PlayerClientGetTransactionResponse.h"
#include "PlayerClientGetTransactionsResponse.h"
#include "PlayerClientPlayerOperationResponse.h"

namespace OpenAPI
{

/* Creating a new transaction on behalf of a user

*/
class PLAYERCLIENT_API PlayerClientTransactionsApi::CreateUserTransactionRequest : public Request
{
public:
    virtual ~CreateUserTransactionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	PlayerClientCreateTransactionRequestInput PlayerClientCreateTransactionRequestInput;
};

class PLAYERCLIENT_API PlayerClientTransactionsApi::CreateUserTransactionResponse : public Response
{
public:
    virtual ~CreateUserTransactionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientPlayerOperationResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* Getting a transaction

*/
class PLAYERCLIENT_API PlayerClientTransactionsApi::GetTransactionRequest : public Request
{
public:
    virtual ~GetTransactionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString TransactionId;
};

class PLAYERCLIENT_API PlayerClientTransactionsApi::GetTransactionResponse : public Response
{
public:
    virtual ~GetTransactionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetTransactionResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* Get a paginated list of transactions from your game

*/
class PLAYERCLIENT_API PlayerClientTransactionsApi::GetTransactionsRequest : public Request
{
public:
    virtual ~GetTransactionsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	TOptional<double> Limit;
	TOptional<double> Offset;
};

class PLAYERCLIENT_API PlayerClientTransactionsApi::GetTransactionsResponse : public Response
{
public:
    virtual ~GetTransactionsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetTransactionsResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

/* Get a paginated list of transactions created on behalf of a user

*/
class PLAYERCLIENT_API PlayerClientTransactionsApi::GetUserTransactionsRequest : public Request
{
public:
    virtual ~GetUserTransactionsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString EntityId;
	TOptional<double> Limit;
	TOptional<double> Offset;
};

class PLAYERCLIENT_API PlayerClientTransactionsApi::GetUserTransactionsResponse : public Response
{
public:
    virtual ~GetUserTransactionsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    PlayerClientGetTransactionsResponse Content;
private:
    std::string GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode);
};

}
