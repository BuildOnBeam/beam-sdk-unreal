/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientCommonAssetActivityRequestInput.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientCommonAssetActivityRequestInput::TypesEnum& Value)
{
	switch (Value)
	{
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::Ask:
		return TEXT("ask");
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::AskCancel:
		return TEXT("ask_cancel");
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::Bid:
		return TEXT("bid");
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::BidCancel:
		return TEXT("bid_cancel");
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::Sale:
		return TEXT("sale");
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::Mint:
		return TEXT("mint");
	case PlayerClientCommonAssetActivityRequestInput::TypesEnum::Transfer:
		return TEXT("transfer");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientCommonAssetActivityRequestInput::TypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientCommonAssetActivityRequestInput::EnumToString(const PlayerClientCommonAssetActivityRequestInput::TypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientCommonAssetActivityRequestInput::TypesEnum& Value)
{
	static TMap<FString, PlayerClientCommonAssetActivityRequestInput::TypesEnum> StringToEnum = { 
		{ TEXT("ask"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::Ask },
		{ TEXT("ask_cancel"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::AskCancel },
		{ TEXT("bid"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::Bid },
		{ TEXT("bid_cancel"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::BidCancel },
		{ TEXT("sale"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::Sale },
		{ TEXT("mint"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::Mint },
		{ TEXT("transfer"), PlayerClientCommonAssetActivityRequestInput::TypesEnum::Transfer }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientCommonAssetActivityRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientCommonAssetActivityRequestInput::TypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientCommonAssetActivityRequestInput::TypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientCommonAssetActivityRequestInput::TypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientCommonAssetActivityRequestInput::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Limit.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("limit")); WriteJsonValue(Writer, Limit.GetValue());
	}
	if (Types.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("types")); WriteJsonValue(Writer, Types.GetValue());
	}
	if (ChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chainId")); WriteJsonValue(Writer, ChainId.GetValue());
	}
	if (Continuation.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("continuation")); WriteJsonValue(Writer, Continuation.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientCommonAssetActivityRequestInput::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("limit"), Limit);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("types"), Types);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chainId"), ChainId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("continuation"), Continuation);

	return ParseSuccess;
}

}
