/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientGetAssetListingsResponseDataInner.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientGetAssetListingsResponseDataInner::StatusEnum& Value)
{
	switch (Value)
	{
	case PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Active:
		return TEXT("active");
	case PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Inactive:
		return TEXT("inactive");
	case PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Expired:
		return TEXT("expired");
	case PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Canceled:
		return TEXT("canceled");
	case PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Filled:
		return TEXT("filled");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientGetAssetListingsResponseDataInner::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientGetAssetListingsResponseDataInner::EnumToString(const PlayerClientGetAssetListingsResponseDataInner::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientGetAssetListingsResponseDataInner::StatusEnum& Value)
{
	static TMap<FString, PlayerClientGetAssetListingsResponseDataInner::StatusEnum> StringToEnum = { 
		{ TEXT("active"), PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Active },
		{ TEXT("inactive"), PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Inactive },
		{ TEXT("expired"), PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Expired },
		{ TEXT("canceled"), PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Canceled },
		{ TEXT("filled"), PlayerClientGetAssetListingsResponseDataInner::StatusEnum::Filled }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientGetAssetListingsResponseDataInner::EnumFromString(const FString& EnumAsString, PlayerClientGetAssetListingsResponseDataInner::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientGetAssetListingsResponseDataInner::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientGetAssetListingsResponseDataInner::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientGetAssetListingsResponseDataInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("side")); WriteJsonValue(Writer, Side);
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("assetAddress")); WriteJsonValue(Writer, AssetAddress);
	Writer->WriteIdentifierPrefix(TEXT("assetId")); WriteJsonValue(Writer, AssetId);
	Writer->WriteIdentifierPrefix(TEXT("contractKind")); WriteJsonValue(Writer, ContractKind);
	Writer->WriteIdentifierPrefix(TEXT("maker")); WriteJsonValue(Writer, Maker);
	if (Price.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price.GetValue());
	}
	if (ValidFrom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("validFrom")); WriteJsonValue(Writer, ValidFrom.GetValue());
	}
	if (ValidUntil.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("validUntil")); WriteJsonValue(Writer, ValidUntil.GetValue());
	}
	if (QuantityFilled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("quantityFilled")); WriteJsonValue(Writer, QuantityFilled.GetValue());
	}
	if (QuantityRemaining.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("quantityRemaining")); WriteJsonValue(Writer, QuantityRemaining.GetValue());
	}
	if (ExpiresAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("expiresAt")); WriteJsonValue(Writer, ExpiresAt.GetValue());
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt.GetValue());
	}
	if (UpdatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updatedAt")); WriteJsonValue(Writer, UpdatedAt.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientGetAssetListingsResponseDataInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("side"), Side);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetAddress"), AssetAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetId"), AssetId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contractKind"), ContractKind);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("maker"), Maker);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("validFrom"), ValidFrom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("validUntil"), ValidUntil);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("quantityFilled"), QuantityFilled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("quantityRemaining"), QuantityRemaining);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("expiresAt"), ExpiresAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updatedAt"), UpdatedAt);

	return ParseSuccess;
}

}
