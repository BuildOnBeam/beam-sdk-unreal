/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientPlayerOperationActionSignature.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientPlayerOperationActionSignature::TypeEnum& Value)
{
	switch (Value)
	{
	case PlayerClientPlayerOperationActionSignature::TypeEnum::Message:
		return TEXT("Message");
	case PlayerClientPlayerOperationActionSignature::TypeEnum::TypedData:
		return TEXT("TypedData");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientPlayerOperationActionSignature::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientPlayerOperationActionSignature::EnumToString(const PlayerClientPlayerOperationActionSignature::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientPlayerOperationActionSignature::TypeEnum& Value)
{
	static TMap<FString, PlayerClientPlayerOperationActionSignature::TypeEnum> StringToEnum = { 
		{ TEXT("Message"), PlayerClientPlayerOperationActionSignature::TypeEnum::Message },
		{ TEXT("TypedData"), PlayerClientPlayerOperationActionSignature::TypeEnum::TypedData }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientPlayerOperationActionSignature::EnumFromString(const FString& EnumAsString, PlayerClientPlayerOperationActionSignature::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientPlayerOperationActionSignature::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientPlayerOperationActionSignature::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientPlayerOperationActionSignature::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	if (Data.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data.GetValue());
	}
	if (Signature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature.GetValue());
	}
	if (ActionId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("actionId")); WriteJsonValue(Writer, ActionId.GetValue());
	}
	if (Hash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hash")); WriteJsonValue(Writer, Hash.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientPlayerOperationActionSignature::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("actionId"), ActionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hash"), Hash);

	return ParseSuccess;
}

}
