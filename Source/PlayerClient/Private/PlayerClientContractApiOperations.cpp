/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientContractApiOperations.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include <string>
#include <stdexcept>

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString PlayerClientContractApi::ReadContractRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("contractAddress"), FStringFormatArg(ToUrlString(ContractAddress)) } };

	FString Path = FString::Format(TEXT("/v1/contract/{contractAddress}/read"), PathParams);

	return Path;
}

void PlayerClientContractApi::ReadContractRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientReadContractRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientReadContractRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientReadContractRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientContractApi::ReadContractResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

FString PlayerClientContractApi::ReadContractResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return FString::Printf(TEXT("%dXX"), firstDigit);
}

bool PlayerClientContractApi::ReadContractResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
