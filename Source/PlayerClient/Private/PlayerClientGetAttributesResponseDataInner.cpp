/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientGetAttributesResponseDataInner.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientGetAttributesResponseDataInner::KindEnum& Value)
{
	switch (Value)
	{
	case PlayerClientGetAttributesResponseDataInner::KindEnum::String:
		return TEXT("string");
	case PlayerClientGetAttributesResponseDataInner::KindEnum::Number:
		return TEXT("number");
	case PlayerClientGetAttributesResponseDataInner::KindEnum::Date:
		return TEXT("date");
	case PlayerClientGetAttributesResponseDataInner::KindEnum::Range:
		return TEXT("range");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientGetAttributesResponseDataInner::KindEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientGetAttributesResponseDataInner::EnumToString(const PlayerClientGetAttributesResponseDataInner::KindEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientGetAttributesResponseDataInner::KindEnum& Value)
{
	static TMap<FString, PlayerClientGetAttributesResponseDataInner::KindEnum> StringToEnum = { 
		{ TEXT("string"), PlayerClientGetAttributesResponseDataInner::KindEnum::String },
		{ TEXT("number"), PlayerClientGetAttributesResponseDataInner::KindEnum::Number },
		{ TEXT("date"), PlayerClientGetAttributesResponseDataInner::KindEnum::Date },
		{ TEXT("range"), PlayerClientGetAttributesResponseDataInner::KindEnum::Range }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientGetAttributesResponseDataInner::EnumFromString(const FString& EnumAsString, PlayerClientGetAttributesResponseDataInner::KindEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientGetAttributesResponseDataInner::KindEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientGetAttributesResponseDataInner::KindEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientGetAttributesResponseDataInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("key")); WriteJsonValue(Writer, Key);
	Writer->WriteIdentifierPrefix(TEXT("kind")); WriteJsonValue(Writer, Kind);
	if (Values.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("values")); WriteJsonValue(Writer, Values.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientGetAttributesResponseDataInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("key"), Key);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("kind"), Kind);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("values"), Values);

	return ParseSuccess;
}

}
