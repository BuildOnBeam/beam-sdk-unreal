/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientPlayerOperationAction.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientPlayerOperationAction::TypeEnum& Value)
{
	switch (Value)
	{
	case PlayerClientPlayerOperationAction::TypeEnum::FiatOnRamp:
		return TEXT("FiatOnRamp");
	case PlayerClientPlayerOperationAction::TypeEnum::Sign:
		return TEXT("Sign");
	case PlayerClientPlayerOperationAction::TypeEnum::SessionRevoke:
		return TEXT("SessionRevoke");
	case PlayerClientPlayerOperationAction::TypeEnum::MarketplaceCreateOffer:
		return TEXT("MarketplaceCreateOffer");
	case PlayerClientPlayerOperationAction::TypeEnum::MarketplaceCancelOffer:
		return TEXT("MarketplaceCancelOffer");
	case PlayerClientPlayerOperationAction::TypeEnum::MarketplaceAcceptOffer:
		return TEXT("MarketplaceAcceptOffer");
	case PlayerClientPlayerOperationAction::TypeEnum::MarketplaceBuyAsset:
		return TEXT("MarketplaceBuyAsset");
	case PlayerClientPlayerOperationAction::TypeEnum::MarketplaceListAsset:
		return TEXT("MarketplaceListAsset");
	case PlayerClientPlayerOperationAction::TypeEnum::MarketplaceCancelListing:
		return TEXT("MarketplaceCancelListing");
	case PlayerClientPlayerOperationAction::TypeEnum::ExchangeConvert:
		return TEXT("ExchangeConvert");
	case PlayerClientPlayerOperationAction::TypeEnum::ExchangeWrap:
		return TEXT("ExchangeWrap");
	case PlayerClientPlayerOperationAction::TypeEnum::ExchangeUnwrap:
		return TEXT("ExchangeUnwrap");
	case PlayerClientPlayerOperationAction::TypeEnum::TransferNFTs:
		return TEXT("TransferNFTs");
	case PlayerClientPlayerOperationAction::TypeEnum::TransferToken:
		return TEXT("TransferToken");
	case PlayerClientPlayerOperationAction::TypeEnum::CustomTransaction:
		return TEXT("CustomTransaction");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientPlayerOperationAction::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientPlayerOperationAction::EnumToString(const PlayerClientPlayerOperationAction::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientPlayerOperationAction::TypeEnum& Value)
{
	static TMap<FString, PlayerClientPlayerOperationAction::TypeEnum> StringToEnum = { 
		{ TEXT("FiatOnRamp"), PlayerClientPlayerOperationAction::TypeEnum::FiatOnRamp },
		{ TEXT("Sign"), PlayerClientPlayerOperationAction::TypeEnum::Sign },
		{ TEXT("SessionRevoke"), PlayerClientPlayerOperationAction::TypeEnum::SessionRevoke },
		{ TEXT("MarketplaceCreateOffer"), PlayerClientPlayerOperationAction::TypeEnum::MarketplaceCreateOffer },
		{ TEXT("MarketplaceCancelOffer"), PlayerClientPlayerOperationAction::TypeEnum::MarketplaceCancelOffer },
		{ TEXT("MarketplaceAcceptOffer"), PlayerClientPlayerOperationAction::TypeEnum::MarketplaceAcceptOffer },
		{ TEXT("MarketplaceBuyAsset"), PlayerClientPlayerOperationAction::TypeEnum::MarketplaceBuyAsset },
		{ TEXT("MarketplaceListAsset"), PlayerClientPlayerOperationAction::TypeEnum::MarketplaceListAsset },
		{ TEXT("MarketplaceCancelListing"), PlayerClientPlayerOperationAction::TypeEnum::MarketplaceCancelListing },
		{ TEXT("ExchangeConvert"), PlayerClientPlayerOperationAction::TypeEnum::ExchangeConvert },
		{ TEXT("ExchangeWrap"), PlayerClientPlayerOperationAction::TypeEnum::ExchangeWrap },
		{ TEXT("ExchangeUnwrap"), PlayerClientPlayerOperationAction::TypeEnum::ExchangeUnwrap },
		{ TEXT("TransferNFTs"), PlayerClientPlayerOperationAction::TypeEnum::TransferNFTs },
		{ TEXT("TransferToken"), PlayerClientPlayerOperationAction::TypeEnum::TransferToken },
		{ TEXT("CustomTransaction"), PlayerClientPlayerOperationAction::TypeEnum::CustomTransaction }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientPlayerOperationAction::EnumFromString(const FString& EnumAsString, PlayerClientPlayerOperationAction::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientPlayerOperationAction::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientPlayerOperationAction::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientPlayerOperationAction::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("index")); WriteJsonValue(Writer, Index);
	if (OperationId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("operationId")); WriteJsonValue(Writer, OperationId.GetValue());
	}
	if (Context.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("context")); WriteJsonValue(Writer, Context.GetValue());
	}
	if (Signature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature.GetValue());
	}
	if (Transaction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transaction")); WriteJsonValue(Writer, Transaction.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientPlayerOperationAction::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("index"), Index);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("operationId"), OperationId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("context"), Context);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction"), Transaction);

	return ParseSuccess;
}

}
