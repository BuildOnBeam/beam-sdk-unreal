/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientGetTransactionsResponseDataInnerTransaction.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void PlayerClientGetTransactionsResponseDataInnerTransaction::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt);
	if (BlockNumber.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blockNumber")); WriteJsonValue(Writer, BlockNumber.GetValue());
	}
	if (Hash.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hash")); WriteJsonValue(Writer, Hash.GetValue());
	}
	if (GasUsed.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gasUsed")); WriteJsonValue(Writer, GasUsed.GetValue());
	}
	if (GasFee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gasFee")); WriteJsonValue(Writer, GasFee.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (Logs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("logs")); WriteJsonValue(Writer, Logs.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientGetTransactionsResponseDataInnerTransaction::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blockNumber"), BlockNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hash"), Hash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gasUsed"), GasUsed);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gasFee"), GasFee);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("logs"), Logs);

	return ParseSuccess;
}

}
