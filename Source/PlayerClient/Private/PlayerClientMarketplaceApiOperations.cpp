/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientMarketplaceApiOperations.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include <string>
#include <stdexcept>

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString PlayerClientMarketplaceApi::AcceptAssetOfferRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) },
	{ TEXT("offerId"), FStringFormatArg(ToUrlString(OfferId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/offers/{offerId}/accept"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::AcceptAssetOfferRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientAcceptAssetOfferRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientAcceptAssetOfferRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientAcceptAssetOfferRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::AcceptAssetOfferResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::AcceptAssetOfferResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::AcceptAssetOfferResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::BuyListedAssetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) },
	{ TEXT("orderId"), FStringFormatArg(ToUrlString(OrderId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/listing/{orderId}"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::BuyListedAssetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientBuyAssetRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientBuyAssetRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientBuyAssetRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::BuyListedAssetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::BuyListedAssetResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::BuyListedAssetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::CancelAssetOfferRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) },
	{ TEXT("offerId"), FStringFormatArg(ToUrlString(OfferId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/offers/{offerId}"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::CancelAssetOfferRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void PlayerClientMarketplaceApi::CancelAssetOfferResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::CancelAssetOfferResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::CancelAssetOfferResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::CancelListingRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) },
	{ TEXT("orderId"), FStringFormatArg(ToUrlString(OrderId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/listing/{orderId}"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientMarketplaceApi::CancelListingRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void PlayerClientMarketplaceApi::CancelListingResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::CancelListingResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::CancelListingResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::CreateAssetOfferRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/offers"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::CreateAssetOfferRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientCreateAssetOfferRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientCreateAssetOfferRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientCreateAssetOfferRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::CreateAssetOfferResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 201)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::CreateAssetOfferResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::CreateAssetOfferResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::GetAssetOffersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) },
	{ TEXT("assetId"), FStringFormatArg(ToUrlString(AssetId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/offers/asset/{assetAddress}/{assetId}"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	if(Continuation.IsSet())
	{
		QueryParams.Add(FString(TEXT("continuation=")) + ToUrlString(Continuation.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientMarketplaceApi::GetAssetOffersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientMarketplaceApi::GetAssetOffersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::GetAssetOffersResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::GetAssetOffersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::GetChainCurrenciesRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chainId"), FStringFormatArg(ToUrlString(ChainId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/chain-currencies/{chainId}"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::GetChainCurrenciesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientMarketplaceApi::GetChainCurrenciesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::GetChainCurrenciesResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::GetChainCurrenciesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::GetListedAssetsRequest::ComputePath() const
{
	FString Path(TEXT("/v1/player/marketplace"));
	return Path;
}

void PlayerClientMarketplaceApi::GetListedAssetsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientGetListedAssetsBodyInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetListedAssetsBodyInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetListedAssetsBodyInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::GetListedAssetsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::GetListedAssetsResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::GetListedAssetsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::GetListedAssetsForUserRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::GetListedAssetsForUserRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientGetListedAssetsBodyInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetListedAssetsBodyInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetListedAssetsBodyInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::GetListedAssetsForUserResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::GetListedAssetsForUserResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::GetListedAssetsForUserResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::GetUserAssetOffersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) },
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) },
	{ TEXT("assetId"), FStringFormatArg(ToUrlString(AssetId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/offers/asset/{assetAddress}/{assetId}"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	if(Continuation.IsSet())
	{
		QueryParams.Add(FString(TEXT("continuation=")) + ToUrlString(Continuation.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientMarketplaceApi::GetUserAssetOffersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientMarketplaceApi::GetUserAssetOffersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::GetUserAssetOffersResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::GetUserAssetOffersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::GetUserOffersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/offers"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	if(Continuation.IsSet())
	{
		QueryParams.Add(FString(TEXT("continuation=")) + ToUrlString(Continuation.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientMarketplaceApi::GetUserOffersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientMarketplaceApi::GetUserOffersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 200)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::GetUserOffersResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::GetUserOffersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::ListAssetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/marketplace/users/{entityId}/listing"), PathParams);

	return Path;
}

void PlayerClientMarketplaceApi::ListAssetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientSellAssetRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientSellAssetRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientSellAssetRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::ListAssetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 201)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::ListAssetResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::ListAssetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientMarketplaceApi::RefreshContractRequest::ComputePath() const
{
	FString Path(TEXT("/v1/player/marketplace/refresh/contract"));
	return Path;
}

void PlayerClientMarketplaceApi::RefreshContractRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientRefreshContractRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientRefreshContractRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientRefreshContractRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::RefreshContractResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 201)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::RefreshContractResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::RefreshContractResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString PlayerClientMarketplaceApi::RefreshTokenRequest::ComputePath() const
{
	FString Path(TEXT("/v1/player/marketplace/refresh/token"));
	return Path;
}

void PlayerClientMarketplaceApi::RefreshTokenRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientRefreshTokenRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientRefreshTokenRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientRefreshTokenRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientMarketplaceApi::RefreshTokenResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);

        if ((int)InHttpResponseCode == 201)
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "4XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
        if (GetHttpStatusCategory(InHttpResponseCode) == "5XX")
        {
            SetResponseString(TEXT(""));
            return;
        }
}

std::string PlayerClientMarketplaceApi::RefreshTokenResponse::GetHttpStatusCategory(EHttpResponseCodes::Type InHttpResponseCode) {
    int statusCode = (int)InHttpResponseCode;

    // Ensure the input is a valid 3-digit HTTP status code
    if (statusCode < 100 || statusCode > 599) {
        throw std::invalid_argument("Invalid HTTP status code. Must be between 100 and 599.");
    }

    // Extract the first digit and append "XX"
    int firstDigit = statusCode / 100;
    return std::to_string(firstDigit) + "XX";
}

bool PlayerClientMarketplaceApi::RefreshTokenResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
