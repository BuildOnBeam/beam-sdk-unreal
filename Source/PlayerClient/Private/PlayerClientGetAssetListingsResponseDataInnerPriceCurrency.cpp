/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientGetAssetListingsResponseDataInnerPriceCurrency.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum& Value)
{
	switch (Value)
	{
	case PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Beam:
		return TEXT("BEAM");
	case PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Soph:
		return TEXT("SOPH");
	case PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Wbeam:
		return TEXT("WBEAM");
	case PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Wsoph:
		return TEXT("WSOPH");
	case PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Rat:
		return TEXT("RAT");
	case PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Usdc:
		return TEXT("USDC");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::EnumToString(const PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum& Value)
{
	static TMap<FString, PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum> StringToEnum = { 
		{ TEXT("BEAM"), PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Beam },
		{ TEXT("SOPH"), PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Soph },
		{ TEXT("WBEAM"), PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Wbeam },
		{ TEXT("WSOPH"), PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Wsoph },
		{ TEXT("RAT"), PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Rat },
		{ TEXT("USDC"), PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum::Usdc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::EnumFromString(const FString& EnumAsString, PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::SymbolEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address);
	if (Symbol.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("symbol")); WriteJsonValue(Writer, Symbol.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("decimals")); WriteJsonValue(Writer, Decimals);
	Writer->WriteObjectEnd();
}

bool PlayerClientGetAssetListingsResponseDataInnerPriceCurrency::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("symbol"), Symbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("decimals"), Decimals);

	return ParseSuccess;
}

}
