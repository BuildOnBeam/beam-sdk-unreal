/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientSellAssetRequestInput.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientSellAssetRequestInput::SellTypeEnum& Value)
{
	switch (Value)
	{
	case PlayerClientSellAssetRequestInput::SellTypeEnum::FixedPrice:
		return TEXT("FixedPrice");
	case PlayerClientSellAssetRequestInput::SellTypeEnum::DescendingAuction:
		return TEXT("DescendingAuction");
	case PlayerClientSellAssetRequestInput::SellTypeEnum::AscendingAuction:
		return TEXT("AscendingAuction");
	case PlayerClientSellAssetRequestInput::SellTypeEnum::NotForSale:
		return TEXT("NotForSale");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientSellAssetRequestInput::SellTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientSellAssetRequestInput::EnumToString(const PlayerClientSellAssetRequestInput::SellTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientSellAssetRequestInput::SellTypeEnum& Value)
{
	static TMap<FString, PlayerClientSellAssetRequestInput::SellTypeEnum> StringToEnum = { 
		{ TEXT("FixedPrice"), PlayerClientSellAssetRequestInput::SellTypeEnum::FixedPrice },
		{ TEXT("DescendingAuction"), PlayerClientSellAssetRequestInput::SellTypeEnum::DescendingAuction },
		{ TEXT("AscendingAuction"), PlayerClientSellAssetRequestInput::SellTypeEnum::AscendingAuction },
		{ TEXT("NotForSale"), PlayerClientSellAssetRequestInput::SellTypeEnum::NotForSale }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientSellAssetRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientSellAssetRequestInput::SellTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientSellAssetRequestInput::SellTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientSellAssetRequestInput::SellTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const PlayerClientSellAssetRequestInput::CurrencyEnum& Value)
{
	switch (Value)
	{
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Beam:
		return TEXT("BEAM");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Imx:
		return TEXT("IMX");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Soph:
		return TEXT("SOPH");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Wbeam:
		return TEXT("WBEAM");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Wimx:
		return TEXT("WIMX");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Wsoph:
		return TEXT("WSOPH");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Rat:
		return TEXT("RAT");
	case PlayerClientSellAssetRequestInput::CurrencyEnum::Usdc:
		return TEXT("USDC");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientSellAssetRequestInput::CurrencyEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientSellAssetRequestInput::EnumToString(const PlayerClientSellAssetRequestInput::CurrencyEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientSellAssetRequestInput::CurrencyEnum& Value)
{
	static TMap<FString, PlayerClientSellAssetRequestInput::CurrencyEnum> StringToEnum = { 
		{ TEXT("BEAM"), PlayerClientSellAssetRequestInput::CurrencyEnum::Beam },
		{ TEXT("IMX"), PlayerClientSellAssetRequestInput::CurrencyEnum::Imx },
		{ TEXT("SOPH"), PlayerClientSellAssetRequestInput::CurrencyEnum::Soph },
		{ TEXT("WBEAM"), PlayerClientSellAssetRequestInput::CurrencyEnum::Wbeam },
		{ TEXT("WIMX"), PlayerClientSellAssetRequestInput::CurrencyEnum::Wimx },
		{ TEXT("WSOPH"), PlayerClientSellAssetRequestInput::CurrencyEnum::Wsoph },
		{ TEXT("RAT"), PlayerClientSellAssetRequestInput::CurrencyEnum::Rat },
		{ TEXT("USDC"), PlayerClientSellAssetRequestInput::CurrencyEnum::Usdc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientSellAssetRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientSellAssetRequestInput::CurrencyEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientSellAssetRequestInput::CurrencyEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientSellAssetRequestInput::CurrencyEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const PlayerClientSellAssetRequestInput::OperationProcessingEnum& Value)
{
	switch (Value)
	{
	case PlayerClientSellAssetRequestInput::OperationProcessingEnum::SignOnly:
		return TEXT("SignOnly");
	case PlayerClientSellAssetRequestInput::OperationProcessingEnum::Execute:
		return TEXT("Execute");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientSellAssetRequestInput::OperationProcessingEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientSellAssetRequestInput::EnumToString(const PlayerClientSellAssetRequestInput::OperationProcessingEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientSellAssetRequestInput::OperationProcessingEnum& Value)
{
	static TMap<FString, PlayerClientSellAssetRequestInput::OperationProcessingEnum> StringToEnum = { 
		{ TEXT("SignOnly"), PlayerClientSellAssetRequestInput::OperationProcessingEnum::SignOnly },
		{ TEXT("Execute"), PlayerClientSellAssetRequestInput::OperationProcessingEnum::Execute }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientSellAssetRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientSellAssetRequestInput::OperationProcessingEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientSellAssetRequestInput::OperationProcessingEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientSellAssetRequestInput::OperationProcessingEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientSellAssetRequestInput::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("assetAddress")); WriteJsonValue(Writer, AssetAddress);
	Writer->WriteIdentifierPrefix(TEXT("assetId")); WriteJsonValue(Writer, AssetId);
	Writer->WriteIdentifierPrefix(TEXT("quantity")); WriteJsonValue(Writer, Quantity);
	Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price);
	if (StartTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("startTime")); WriteJsonValue(Writer, StartTime.GetValue());
	}
	if (EndTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("endTime")); WriteJsonValue(Writer, EndTime.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("sellType")); WriteJsonValue(Writer, SellType);
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());
	}
	if (Sponsor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sponsor")); WriteJsonValue(Writer, Sponsor.GetValue());
	}
	if (PolicyId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("policyId")); WriteJsonValue(Writer, PolicyId.GetValue());
	}
	if (ChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chainId")); WriteJsonValue(Writer, ChainId.GetValue());
	}
	if (OperationProcessing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("operationProcessing")); WriteJsonValue(Writer, OperationProcessing.GetValue());
	}
	if (OperationId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("operationId")); WriteJsonValue(Writer, OperationId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientSellAssetRequestInput::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetAddress"), AssetAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetId"), AssetId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("quantity"), Quantity);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("startTime"), StartTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("endTime"), EndTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sellType"), SellType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sponsor"), Sponsor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("policyId"), PolicyId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chainId"), ChainId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("operationProcessing"), OperationProcessing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("operationId"), OperationId);

	return ParseSuccess;
}

}
