/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientCreateOnrampRequestInput.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientCreateOnrampRequestInput::PlatformEnum& Value)
{
	switch (Value)
	{
	case PlayerClientCreateOnrampRequestInput::PlatformEnum::Transak:
		return TEXT("transak");
	case PlayerClientCreateOnrampRequestInput::PlatformEnum::Thirdweb:
		return TEXT("thirdweb");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientCreateOnrampRequestInput::PlatformEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientCreateOnrampRequestInput::EnumToString(const PlayerClientCreateOnrampRequestInput::PlatformEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientCreateOnrampRequestInput::PlatformEnum& Value)
{
	static TMap<FString, PlayerClientCreateOnrampRequestInput::PlatformEnum> StringToEnum = { 
		{ TEXT("transak"), PlayerClientCreateOnrampRequestInput::PlatformEnum::Transak },
		{ TEXT("thirdweb"), PlayerClientCreateOnrampRequestInput::PlatformEnum::Thirdweb }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientCreateOnrampRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientCreateOnrampRequestInput::PlatformEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientCreateOnrampRequestInput::PlatformEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientCreateOnrampRequestInput::PlatformEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const PlayerClientCreateOnrampRequestInput::TokenEnum& Value)
{
	switch (Value)
	{
	case PlayerClientCreateOnrampRequestInput::TokenEnum::Beam:
		return TEXT("BEAM");
	case PlayerClientCreateOnrampRequestInput::TokenEnum::Fp:
		return TEXT("FP");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientCreateOnrampRequestInput::TokenEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientCreateOnrampRequestInput::EnumToString(const PlayerClientCreateOnrampRequestInput::TokenEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientCreateOnrampRequestInput::TokenEnum& Value)
{
	static TMap<FString, PlayerClientCreateOnrampRequestInput::TokenEnum> StringToEnum = { 
		{ TEXT("BEAM"), PlayerClientCreateOnrampRequestInput::TokenEnum::Beam },
		{ TEXT("FP"), PlayerClientCreateOnrampRequestInput::TokenEnum::Fp }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientCreateOnrampRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientCreateOnrampRequestInput::TokenEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientCreateOnrampRequestInput::TokenEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientCreateOnrampRequestInput::TokenEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const PlayerClientCreateOnrampRequestInput::AuthProviderEnum& Value)
{
	switch (Value)
	{
	case PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Any:
		return TEXT("Any");
	case PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Google:
		return TEXT("Google");
	case PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Discord:
		return TEXT("Discord");
	case PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Apple:
		return TEXT("Apple");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientCreateOnrampRequestInput::AuthProviderEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientCreateOnrampRequestInput::EnumToString(const PlayerClientCreateOnrampRequestInput::AuthProviderEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientCreateOnrampRequestInput::AuthProviderEnum& Value)
{
	static TMap<FString, PlayerClientCreateOnrampRequestInput::AuthProviderEnum> StringToEnum = { 
		{ TEXT("Any"), PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Any },
		{ TEXT("Google"), PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Google },
		{ TEXT("Discord"), PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Discord },
		{ TEXT("Apple"), PlayerClientCreateOnrampRequestInput::AuthProviderEnum::Apple }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientCreateOnrampRequestInput::EnumFromString(const FString& EnumAsString, PlayerClientCreateOnrampRequestInput::AuthProviderEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientCreateOnrampRequestInput::AuthProviderEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientCreateOnrampRequestInput::AuthProviderEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientCreateOnrampRequestInput::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Platform.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("platform")); WriteJsonValue(Writer, Platform.GetValue());
	}
	if (Token.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("token")); WriteJsonValue(Writer, Token.GetValue());
	}
	if (TokenAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tokenAmount")); WriteJsonValue(Writer, TokenAmount.GetValue());
	}
	if (FiatAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fiatAmount")); WriteJsonValue(Writer, FiatAmount.GetValue());
	}
	if (PaymentCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("paymentCurrency")); WriteJsonValue(Writer, PaymentCurrency.GetValue());
	}
	if (CanChangeAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("canChangeAmount")); WriteJsonValue(Writer, CanChangeAmount.GetValue());
	}
	if (ChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chainId")); WriteJsonValue(Writer, ChainId.GetValue());
	}
	if (AuthProvider.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("authProvider")); WriteJsonValue(Writer, AuthProvider.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientCreateOnrampRequestInput::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("platform"), Platform);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("token"), Token);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tokenAmount"), TokenAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fiatAmount"), FiatAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("paymentCurrency"), PaymentCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("canChangeAmount"), CanChangeAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chainId"), ChainId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("authProvider"), AuthProvider);

	return ParseSuccess;
}

}
