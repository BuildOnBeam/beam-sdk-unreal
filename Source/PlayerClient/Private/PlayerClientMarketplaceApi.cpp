/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientMarketplaceApi.h"

#include "PlayerClientMarketplaceApiOperations.h"
#include "PlayerClientModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace OpenAPI
{

PlayerClientMarketplaceApi::PlayerClientMarketplaceApi()
: Url(TEXT("http://localhost"))
{
}

PlayerClientMarketplaceApi::~PlayerClientMarketplaceApi() {}

void PlayerClientMarketplaceApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void PlayerClientMarketplaceApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void PlayerClientMarketplaceApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool PlayerClientMarketplaceApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogPlayerClient, Error, TEXT("PlayerClientMarketplaceApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void PlayerClientMarketplaceApi::SetHttpRetryManager(FHttpRetrySystem::FManager& InRetryManager)
{
	if (RetryManager != &InRetryManager)
	{
		DefaultRetryManager.Reset();
		RetryManager = &InRetryManager;
	}
}

FHttpRetrySystem::FManager& PlayerClientMarketplaceApi::GetHttpRetryManager()
{
	checkf(RetryManager, TEXT("PlayerClientMarketplaceApi: RetryManager is null.  You may have meant to set it with SetHttpRetryManager first, or you may not be using a custom RetryManager at all."))
	return *RetryManager;
}

FHttpRequestRef PlayerClientMarketplaceApi::CreateHttpRequest(const Request& Request) const
{
	if (!Request.GetRetryParams().IsSet())
	{
		return FHttpModule::Get().CreateRequest();
	}
	else
	{
		if (!RetryManager)
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeUnique<HttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.Get();
		}

		const HttpRetryParams& Params = Request.GetRetryParams().GetValue();
		return RetryManager->CreateRequest(Params.RetryLimitCountOverride, Params.RetryTimeoutRelativeSecondsOverride, Params.RetryResponseCodes, Params.RetryVerbs, Params.RetryDomains);
	}
}

void PlayerClientMarketplaceApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType.IsEmpty())
		{
			return; // Nothing to parse
		}
		else if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType.StartsWith(TEXT("text/plain")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogPlayerClient, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

FHttpRequestPtr PlayerClientMarketplaceApi::AcceptAssetOffer(const AcceptAssetOfferRequest& Request, const FAcceptAssetOfferDelegate& Delegate /*= FAcceptAssetOfferDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnAcceptAssetOfferResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnAcceptAssetOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptAssetOfferDelegate Delegate) const
{
	AcceptAssetOfferResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::BuyListedAsset(const BuyListedAssetRequest& Request, const FBuyListedAssetDelegate& Delegate /*= FBuyListedAssetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnBuyListedAssetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnBuyListedAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBuyListedAssetDelegate Delegate) const
{
	BuyListedAssetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::CancelAssetOffer(const CancelAssetOfferRequest& Request, const FCancelAssetOfferDelegate& Delegate /*= FCancelAssetOfferDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnCancelAssetOfferResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnCancelAssetOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelAssetOfferDelegate Delegate) const
{
	CancelAssetOfferResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::CancelListing(const CancelListingRequest& Request, const FCancelListingDelegate& Delegate /*= FCancelListingDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnCancelListingResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnCancelListingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelListingDelegate Delegate) const
{
	CancelListingResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::CreateAssetOffer(const CreateAssetOfferRequest& Request, const FCreateAssetOfferDelegate& Delegate /*= FCreateAssetOfferDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnCreateAssetOfferResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnCreateAssetOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateAssetOfferDelegate Delegate) const
{
	CreateAssetOfferResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::GetAssetOffers(const GetAssetOffersRequest& Request, const FGetAssetOffersDelegate& Delegate /*= FGetAssetOffersDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnGetAssetOffersResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnGetAssetOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAssetOffersDelegate Delegate) const
{
	GetAssetOffersResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::GetChainCurrencies(const GetChainCurrenciesRequest& Request, const FGetChainCurrenciesDelegate& Delegate /*= FGetChainCurrenciesDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnGetChainCurrenciesResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnGetChainCurrenciesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetChainCurrenciesDelegate Delegate) const
{
	GetChainCurrenciesResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::GetListedAssets(const GetListedAssetsRequest& Request, const FGetListedAssetsDelegate& Delegate /*= FGetListedAssetsDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnGetListedAssetsResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnGetListedAssetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetListedAssetsDelegate Delegate) const
{
	GetListedAssetsResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::GetListedAssetsForUser(const GetListedAssetsForUserRequest& Request, const FGetListedAssetsForUserDelegate& Delegate /*= FGetListedAssetsForUserDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnGetListedAssetsForUserResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnGetListedAssetsForUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetListedAssetsForUserDelegate Delegate) const
{
	GetListedAssetsForUserResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::GetUserAssetOffers(const GetUserAssetOffersRequest& Request, const FGetUserAssetOffersDelegate& Delegate /*= FGetUserAssetOffersDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnGetUserAssetOffersResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnGetUserAssetOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserAssetOffersDelegate Delegate) const
{
	GetUserAssetOffersResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::GetUserOffers(const GetUserOffersRequest& Request, const FGetUserOffersDelegate& Delegate /*= FGetUserOffersDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnGetUserOffersResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnGetUserOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserOffersDelegate Delegate) const
{
	GetUserOffersResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::ListAsset(const ListAssetRequest& Request, const FListAssetDelegate& Delegate /*= FListAssetDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnListAssetResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnListAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListAssetDelegate Delegate) const
{
	ListAssetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::RefreshContract(const RefreshContractRequest& Request, const FRefreshContractDelegate& Delegate /*= FRefreshContractDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnRefreshContractResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnRefreshContractResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshContractDelegate Delegate) const
{
	RefreshContractResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

FHttpRequestPtr PlayerClientMarketplaceApi::RefreshToken(const RefreshTokenRequest& Request, const FRefreshTokenDelegate& Delegate /*= FRefreshTokenDelegate()*/) const
{
	if (!IsValid())
		return nullptr;

	FHttpRequestRef HttpRequest = CreateHttpRequest(Request);
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);

	HttpRequest->OnProcessRequestComplete().BindRaw(this, &PlayerClientMarketplaceApi::OnRefreshTokenResponse, Delegate);
	HttpRequest->ProcessRequest();
	return HttpRequest;
}

void PlayerClientMarketplaceApi::OnRefreshTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshTokenDelegate Delegate) const
{
	RefreshTokenResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
