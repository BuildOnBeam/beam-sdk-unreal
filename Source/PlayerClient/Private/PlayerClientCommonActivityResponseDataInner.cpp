/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientCommonActivityResponseDataInner.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientCommonActivityResponseDataInner::TypeEnum& Value)
{
	switch (Value)
	{
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::Ask:
		return TEXT("ask");
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::AskCancel:
		return TEXT("ask_cancel");
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::Bid:
		return TEXT("bid");
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::BidCancel:
		return TEXT("bid_cancel");
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::Sale:
		return TEXT("sale");
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::Mint:
		return TEXT("mint");
	case PlayerClientCommonActivityResponseDataInner::TypeEnum::Transfer:
		return TEXT("transfer");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientCommonActivityResponseDataInner::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientCommonActivityResponseDataInner::EnumToString(const PlayerClientCommonActivityResponseDataInner::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientCommonActivityResponseDataInner::TypeEnum& Value)
{
	static TMap<FString, PlayerClientCommonActivityResponseDataInner::TypeEnum> StringToEnum = { 
		{ TEXT("ask"), PlayerClientCommonActivityResponseDataInner::TypeEnum::Ask },
		{ TEXT("ask_cancel"), PlayerClientCommonActivityResponseDataInner::TypeEnum::AskCancel },
		{ TEXT("bid"), PlayerClientCommonActivityResponseDataInner::TypeEnum::Bid },
		{ TEXT("bid_cancel"), PlayerClientCommonActivityResponseDataInner::TypeEnum::BidCancel },
		{ TEXT("sale"), PlayerClientCommonActivityResponseDataInner::TypeEnum::Sale },
		{ TEXT("mint"), PlayerClientCommonActivityResponseDataInner::TypeEnum::Mint },
		{ TEXT("transfer"), PlayerClientCommonActivityResponseDataInner::TypeEnum::Transfer }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientCommonActivityResponseDataInner::EnumFromString(const FString& EnumAsString, PlayerClientCommonActivityResponseDataInner::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientCommonActivityResponseDataInner::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientCommonActivityResponseDataInner::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientCommonActivityResponseDataInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("contract")); WriteJsonValue(Writer, Contract);
	Writer->WriteIdentifierPrefix(TEXT("transaction")); WriteJsonValue(Writer, Transaction);
	Writer->WriteIdentifierPrefix(TEXT("asset")); WriteJsonValue(Writer, Asset);
	if (Order.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("order")); WriteJsonValue(Writer, Order.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientCommonActivityResponseDataInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract"), Contract);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction"), Transaction);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("asset"), Asset);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order"), Order);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);

	return ParseSuccess;
}

}
