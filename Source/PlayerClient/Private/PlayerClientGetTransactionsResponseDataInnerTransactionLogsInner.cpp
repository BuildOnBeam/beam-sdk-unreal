/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientGetTransactionsResponseDataInnerTransactionLogsInner.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void PlayerClientGetTransactionsResponseDataInnerTransactionLogsInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("blockNumber")); WriteJsonValue(Writer, BlockNumber);
	Writer->WriteIdentifierPrefix(TEXT("blockHash")); WriteJsonValue(Writer, BlockHash);
	Writer->WriteIdentifierPrefix(TEXT("transactionIndex")); WriteJsonValue(Writer, TransactionIndex);
	Writer->WriteIdentifierPrefix(TEXT("removed")); WriteJsonValue(Writer, Removed);
	Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address);
	Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data);
	Writer->WriteIdentifierPrefix(TEXT("topics")); WriteJsonValue(Writer, Topics);
	Writer->WriteIdentifierPrefix(TEXT("transactionHash")); WriteJsonValue(Writer, TransactionHash);
	Writer->WriteIdentifierPrefix(TEXT("logIndex")); WriteJsonValue(Writer, LogIndex);
	if (Orphaned.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("orphaned")); WriteJsonValue(Writer, Orphaned.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientGetTransactionsResponseDataInnerTransactionLogsInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blockNumber"), BlockNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blockHash"), BlockHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transactionIndex"), TransactionIndex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("removed"), Removed);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("topics"), Topics);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transactionHash"), TransactionHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("logIndex"), LogIndex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("orphaned"), Orphaned);

	return ParseSuccess;
}

}
