/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientCreateOperationRequestInputTransactionsInner.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum& Value)
{
	switch (Value)
	{
	case PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum::OpenfortTransaction:
		return TEXT("OpenfortTransaction");
	case PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum::OpenfortReservoirOrder:
		return TEXT("OpenfortReservoirOrder");
	case PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum::OpenfortRevokeSession:
		return TEXT("OpenfortRevokeSession");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientCreateOperationRequestInputTransactionsInner::EnumToString(const PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum& Value)
{
	static TMap<FString, PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum> StringToEnum = { 
		{ TEXT("OpenfortTransaction"), PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum::OpenfortTransaction },
		{ TEXT("OpenfortReservoirOrder"), PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum::OpenfortReservoirOrder },
		{ TEXT("OpenfortRevokeSession"), PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum::OpenfortRevokeSession }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientCreateOperationRequestInputTransactionsInner::EnumFromString(const FString& EnumAsString, PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientCreateOperationRequestInputTransactionsInner::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientCreateOperationRequestInputTransactionsInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Data.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteObjectEnd();
}

bool PlayerClientCreateOperationRequestInputTransactionsInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);

	return ParseSuccess;
}

}
