/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientGetAssetResponse.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const PlayerClientGetAssetResponse::RarityEnum& Value)
{
	switch (Value)
	{
	case PlayerClientGetAssetResponse::RarityEnum::Common:
		return TEXT("Common");
	case PlayerClientGetAssetResponse::RarityEnum::Uncommon:
		return TEXT("Uncommon");
	case PlayerClientGetAssetResponse::RarityEnum::Rare:
		return TEXT("Rare");
	case PlayerClientGetAssetResponse::RarityEnum::VeryRare:
		return TEXT("VeryRare");
	case PlayerClientGetAssetResponse::RarityEnum::ExtremelyRare:
		return TEXT("ExtremelyRare");
	}

	UE_LOG(LogPlayerClient, Error, TEXT("Invalid PlayerClientGetAssetResponse::RarityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString PlayerClientGetAssetResponse::EnumToString(const PlayerClientGetAssetResponse::RarityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, PlayerClientGetAssetResponse::RarityEnum& Value)
{
	static TMap<FString, PlayerClientGetAssetResponse::RarityEnum> StringToEnum = { 
		{ TEXT("Common"), PlayerClientGetAssetResponse::RarityEnum::Common },
		{ TEXT("Uncommon"), PlayerClientGetAssetResponse::RarityEnum::Uncommon },
		{ TEXT("Rare"), PlayerClientGetAssetResponse::RarityEnum::Rare },
		{ TEXT("VeryRare"), PlayerClientGetAssetResponse::RarityEnum::VeryRare },
		{ TEXT("ExtremelyRare"), PlayerClientGetAssetResponse::RarityEnum::ExtremelyRare }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool PlayerClientGetAssetResponse::EnumFromString(const FString& EnumAsString, PlayerClientGetAssetResponse::RarityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const PlayerClientGetAssetResponse::RarityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, PlayerClientGetAssetResponse::RarityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void PlayerClientGetAssetResponse::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name);
	Writer->WriteIdentifierPrefix(TEXT("imageUrl")); WriteJsonValue(Writer, ImageUrl);
	Writer->WriteIdentifierPrefix(TEXT("assetType")); WriteJsonValue(Writer, AssetType);
	Writer->WriteIdentifierPrefix(TEXT("assetAddress")); WriteJsonValue(Writer, AssetAddress);
	Writer->WriteIdentifierPrefix(TEXT("assetId")); WriteJsonValue(Writer, AssetId);
	Writer->WriteIdentifierPrefix(TEXT("supply")); WriteJsonValue(Writer, Supply);
	if (Owners.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("owners")); WriteJsonValue(Writer, Owners.GetValue());
	}
	if (Rarity.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("rarity")); WriteJsonValue(Writer, Rarity.GetValue());
	}
	if (RarityScore.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("rarityScore")); WriteJsonValue(Writer, RarityScore.GetValue());
	}
	if (Attributes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("attributes")); WriteJsonValue(Writer, Attributes.GetValue());
	}
	if (ChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chainId")); WriteJsonValue(Writer, ChainId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool PlayerClientGetAssetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("imageUrl"), ImageUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetType"), AssetType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetAddress"), AssetAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assetId"), AssetId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("supply"), Supply);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("owners"), Owners);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("rarity"), Rarity);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("rarityScore"), RarityScore);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("attributes"), Attributes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chainId"), ChainId);

	return ParseSuccess;
}

}
