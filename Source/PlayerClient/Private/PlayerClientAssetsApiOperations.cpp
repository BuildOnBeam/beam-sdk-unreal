/**
 * Player API
 * The Player API is a service to integrate your game with Beam
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "PlayerClientAssetsApiOperations.h"

#include "PlayerClientModule.h"
#include "PlayerClientHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString PlayerClientAssetsApi::GetAssetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) },
	{ TEXT("assetId"), FStringFormatArg(ToUrlString(AssetId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/{assetAddress}/assets/{assetId}"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	if(EntityId.IsSet())
	{
		QueryParams.Add(FString(TEXT("entityId=")) + ToUrlString(EntityId.GetValue()));
	}
	if(Owners.IsSet())
	{
		QueryParams.Add(FString(TEXT("owners=")) + ToUrlString(Owners.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientAssetsApi::GetAssetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientAssetsApi::GetAssetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetAssetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetAssetsForContractRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/{assetAddress}/assets"), PathParams);

	return Path;
}

void PlayerClientAssetsApi::GetAssetsForContractRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientGetAssetsForContractBodyInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetAssetsForContractBodyInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetAssetsForContractBodyInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientAssetsApi::GetAssetsForContractResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetAssetsForContractResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetAttributesRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/{assetAddress}/attributes"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientAssetsApi::GetAttributesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientAssetsApi::GetAttributesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetAttributesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetOwnerAssetsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) },
	{ TEXT("ownerAddress"), FStringFormatArg(ToUrlString(OwnerAddress)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/{assetAddress}/owners/{ownerAddress}/assets"), PathParams);

	return Path;
}

void PlayerClientAssetsApi::GetOwnerAssetsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientGetOwnerAssetsBodyInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetOwnerAssetsBodyInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetOwnerAssetsBodyInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientAssetsApi::GetOwnerAssetsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetOwnerAssetsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetOwnersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("assetAddress"), FStringFormatArg(ToUrlString(AssetAddress)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/{assetAddress}/owners"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId));
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(Offset.IsSet())
	{
		QueryParams.Add(FString(TEXT("offset=")) + ToUrlString(Offset.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientAssetsApi::GetOwnersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientAssetsApi::GetOwnersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetOwnersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetUserAssetsForGamePostRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/users/{entityId}"), PathParams);

	return Path;
}

void PlayerClientAssetsApi::GetUserAssetsForGamePostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientGetAssetsForUserBodyInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetAssetsForUserBodyInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientGetAssetsForUserBodyInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientAssetsApi::GetUserAssetsForGamePostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetUserAssetsForGamePostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetUserCurrenciesRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/users/{entityId}/currencies"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientAssetsApi::GetUserCurrenciesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientAssetsApi::GetUserCurrenciesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetUserCurrenciesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::GetUserNativeCurrencyRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/users/{entityId}/native"), PathParams);

	TArray<FString> QueryParams;
	if(ChainId.IsSet())
	{
		QueryParams.Add(FString(TEXT("chainId=")) + ToUrlString(ChainId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void PlayerClientAssetsApi::GetUserNativeCurrencyRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void PlayerClientAssetsApi::GetUserNativeCurrencyResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::GetUserNativeCurrencyResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::TransferAssetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/users/{entityId}/transfer-asset"), PathParams);

	return Path;
}

void PlayerClientAssetsApi::TransferAssetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientTransferAssetRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientTransferAssetRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientTransferAssetRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientAssetsApi::TransferAssetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::TransferAssetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::TransferNativeTokenRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/users/{entityId}/transfer-native"), PathParams);

	return Path;
}

void PlayerClientAssetsApi::TransferNativeTokenRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientTransferNativeTokenRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientTransferNativeTokenRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientTransferNativeTokenRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientAssetsApi::TransferNativeTokenResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::TransferNativeTokenResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString PlayerClientAssetsApi::TransferTokenRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("entityId"), FStringFormatArg(ToUrlString(EntityId)) } };

	FString Path = FString::Format(TEXT("/v1/player/assets/users/{entityId}/transfer-token"), PathParams);

	return Path;
}

void PlayerClientAssetsApi::TransferTokenRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, PlayerClientTransferTokenRequestInput);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientTransferTokenRequestInput) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Body parameter (PlayerClientTransferTokenRequestInput) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogPlayerClient, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void PlayerClientAssetsApi::TransferTokenResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT(""));
		break;
	case 4XX:
		SetResponseString(TEXT(""));
		break;
	case 5XX:
		SetResponseString(TEXT(""));
		break;
	}
}

bool PlayerClientAssetsApi::TransferTokenResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
